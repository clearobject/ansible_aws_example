---
- hosts: all
  gather_facts: False

  tasks:

    # Terminates each instance and waits for them to be removed
    - name: Terminate each instance
      local_action:
        module: ec2
        state: absent
        instance_ids: "{{ ec2_id }}"
        wait: yes

    # Find the AMI we created
    - name: Grab details for the demo_ami
      local_action:
        module: ec2_ami_find
        name: demo_ami
      register: ami_find

    # # Destory the AMI we create
    - name: Destroy any the ami we created
      local_action:
        module: ec2_ami
        image_id: "{{ ami_find.results[0].ami_id }}"
        state: absent
      when: ami_find.results

    # Load snapshot information
    - name: Grab snapshot facts for each instance
      local_action:
        module: ec2_snapshot_facts
        filters:
          description: example snapshot
      register: snapshot_facts
      run_once: True

    # Clean up all of our snapshots we created
    - name: Delete snapshots
      local_action:
        module: ec2_snapshot
        snapshot_id: "{{ item.snapshot_id }}"
        state: absent
      with_items: "{{ snapshot_facts.snapshots }}"

    # Take down our load balancer
    - name: Delete the load balancer
      local_action:
        module: ec2_elb_lb
        name: demo-lb
        state: absent

    # Removes my ec2 key pair
    - name: Remove my key
      local_action:
        module: ec2_key
        name: my_key
        state: absent
      run_once: True

    # Load the VPC subnet details so we can delete it
    - name: Get subnet details
      local_action:
        module: ec2_vpc_subnet_facts
        filters:
          subnet-id: "{{ ec2_subnet_id }}"
      register: subnet
      run_once: True

    # Remove the subnet previously allocated
    - name: Remove subnet for demo servers
      local_action:
        module: ec2_vpc_subnet
        state: absent
        vpc_id: "{{ ec2_vpc_id }}"
        cidr: "{{ subnet.subnets[0].cidr_block }}"
      run_once: True
      when: subnet.subnets

    # Remove the EC2 security group
    - name: Remove our ec2 security group
      local_action:
        module: ec2_group
        name: demo
        state: absent
        description:
      run_once: True
